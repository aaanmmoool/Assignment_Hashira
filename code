#include <iostream>
#include <vector>
#include <string>
#include <stdexcept>
#include <tuple>
#include <boost/multiprecision/cpp_int.hpp>

using namespace std;
using BigInt = boost::multiprecision::cpp_int;

struct Point {
    BigInt x;
    BigInt y;
};

BigInt decodeValue(const string& value_str, int base) {
    BigInt result = 0;
    BigInt b = base;
    for (char c : value_str) {
        int digit;
        if (c >= '0' && c <= '9') {
            digit = c - '0';
        } else if (c >= 'a' && c <= 'f') {
            digit = c - 'a' + 10;
        } else {
            throw invalid_argument("Invalid character in value string");
        }
        if (digit >= base) {
             throw invalid_argument("Digit is out of range for the given base");
        }
        result = result * b + digit;
    }
    return result;
}

BigInt findSecretNewton(const vector<Point>& points) {
    size_t k = points.size();
    if (k == 0) return 0;
    
    vector<BigInt> coeffs(k);
    for (size_t i = 0; i < k; ++i) {
        coeffs[i] = points[i].y;
    }

    for (size_t j = 1; j < k; ++j) {
        for (size_t i = k - 1; i >= j; --i) {
            coeffs[i] = (coeffs[i] - coeffs[i - 1]) / (points[i].x - points[i - j].x);
        }
    }

    BigInt secret = coeffs[k - 1];
    for (int i = k - 2; i >= 0; --i) {
        secret = secret * (0 - points[i].x) + coeffs[i];
    }
    return secret;
}

void solveTestCase1() {
    const int k = 3;
    vector<tuple<string, string, string>> raw_data = {
        {"1", "10", "4"},
        {"2", "2", "111"},
        {"3", "10", "12"}
    };

    vector<Point> points;
    for (size_t i = 0; i < k; ++i) {
        BigInt x = stoi(get<0>(raw_data[i]));
        int base = stoi(get<1>(raw_data[i]));
        string value_str = get<2>(raw_data[i]);
        BigInt y = decodeValue(value_str, base);
        points.push_back({x, y});
    }
    
    BigInt secret = findSecretNewton(points);
    cout << "Test Case 1 Answer: " << secret << endl;
}

void solveTestCase2() {
    const int k = 7;
    vector<tuple<string, string, string>> raw_data = {
        {"1", "6", "13444211440455345511"},
        {"2", "15", "aed7015a346d63"},
        {"3", "15", "6aeeb69631c227c"},
        {"4", "16", "e1b5e05623d881f"},
        {"5", "8", "316034514573652620673"},
        {"6", "3", "2122212201122002221120200210011020220200"},
        {"7", "3", "20120221122211000100210021102001201112121"}
    };

    vector<Point> points;
    for (size_t i = 0; i < k; ++i) {
        BigInt x = stoi(get<0>(raw_data[i]));
        int base = stoi(get<1>(raw_data[i]));
        string value_str = get<2>(raw_data[i]);
        BigInt y = decodeValue(value_str, base);
        points.push_back({x, y});
    }
    
    BigInt secret = findSecretNewton(points);
    cout << "Test Case 2 Answer: " << secret << endl;
}

int main() {
    solveTestCase1();
    solveTestCase2();
    return 0;
}
